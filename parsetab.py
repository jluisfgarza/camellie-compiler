
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DIVIDE ELSE EQUALS FLOAT FLOAT_TYPE GREATER_THAN ID IF INT INT_TYPE LEFT_BRACE LEFT_PARENTHESIS LESS_THAN MINUS MULTIPLY NOT_EQUAL PLUS PRINT PROGRAM RIGHT_BRACE RIGHT_PARENTHESIS SEMICOLON STRING VAR\n  VARS : VAR ID VARS_P\n  \n  VARS_P : COMMA ID VARS_P\n    | COLON TYPE SEMICOLON\n    | COLON TYPE SEMICOLON VARS_P\n  \n  TYPE : INT_TYPE\n    | FLOAT_TYPE\n  \n  BLOQUE : LEFT_BRACE RIGHT_BRACE\n    | LEFT_BRACE ESTATUTO BLOQUE_P\n  \n  BLOQUE_P : ESTATUTO BLOQUE_P\n    | RIGHT_BRACE\n  \n  ESTATUTO : ASIGNACION\n    | CONDICION\n    | ESCRITURA\n  \n  ASIGNACION : ID EQUALS EXPRESION SEMICOLON\n  \n  ESCRITURA : PRINT LEFT_PARENTHESIS EXPRESION ESCRITURA_P\n    | PRINT LEFT_PARENTHESIS STRING ESCRITURA_P\n  \n  ESCRITURA_P : COMMA EXPRESION ESCRITURA_P\n    | COMMA STRING ESCRITURA_P\n    | RIGHT_PARENTHESIS SEMICOLON\n  \n  EXPRESION : EXP EXPRESION_P\n  \n  EXPRESION_P : GREATER_THAN EXP\n    | LESS_THAN EXP\n    | NOT_EQUAL EXP\n    | EMPTY\n  \n  CONDICION : IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BLOQUE CONDICION_P\n  \n  CONDICION_P : ELSE BLOQUE SEMICOLON\n    | SEMICOLON\n  \n  EXP : TERMINO EXP_P\n  \n  EXP_P : PLUS TERMINO EXP_P\n    | MINUS TERMINO EXP_P\n    | EMPTY\n  \n  TERMINO : FACTOR TERMINO_P\n  \n  TERMINO_P : MULTIPLY FACTOR TERMINO_P\n    | DIVIDE FACTOR TERMINO_P\n    | EMPTY\n  \n  FACTOR : LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS\n    | VARCTE\n    | MINUS VARCTE\n    | PLUS VARCTE\n  \n  VARCTE : ID\n    | INT\n    | FLOAT\n  EMPTY :'
    
_lr_action_items = {'SEMICOLON':([7,8,9,],[-6,-5,11,]),'FLOAT_TYPE':([5,],[7,]),'COMMA':([3,10,11,],[6,6,6,]),'INT_TYPE':([5,],[8,]),'VAR':([0,],[1,]),'COLON':([3,10,11,],[5,5,5,]),'ID':([1,6,],[3,10,]),'$end':([2,4,11,12,13,],[0,-1,-3,-2,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'TYPE':([5,],[9,]),'VARS_P':([3,10,11,],[4,12,13,]),'VARS':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> VARS","S'",1,None,None,None),
  ('VARS -> VAR ID VARS_P','VARS',3,'p_VARS','camellie.py',104),
  ('VARS_P -> COMMA ID VARS_P','VARS_P',3,'p_VARS_P','camellie.py',108),
  ('VARS_P -> COLON TYPE SEMICOLON','VARS_P',3,'p_VARS_P','camellie.py',109),
  ('VARS_P -> COLON TYPE SEMICOLON VARS_P','VARS_P',4,'p_VARS_P','camellie.py',110),
  ('TYPE -> INT_TYPE','TYPE',1,'p_TYPE','camellie.py',115),
  ('TYPE -> FLOAT_TYPE','TYPE',1,'p_TYPE','camellie.py',116),
  ('BLOQUE -> LEFT_BRACE RIGHT_BRACE','BLOQUE',2,'p_BLOQUE','camellie.py',121),
  ('BLOQUE -> LEFT_BRACE ESTATUTO BLOQUE_P','BLOQUE',3,'p_BLOQUE','camellie.py',122),
  ('BLOQUE_P -> ESTATUTO BLOQUE_P','BLOQUE_P',2,'p_BLOQUE_P','camellie.py',126),
  ('BLOQUE_P -> RIGHT_BRACE','BLOQUE_P',1,'p_BLOQUE_P','camellie.py',127),
  ('ESTATUTO -> ASIGNACION','ESTATUTO',1,'p_ESTATUTO','camellie.py',132),
  ('ESTATUTO -> CONDICION','ESTATUTO',1,'p_ESTATUTO','camellie.py',133),
  ('ESTATUTO -> ESCRITURA','ESTATUTO',1,'p_ESTATUTO','camellie.py',134),
  ('ASIGNACION -> ID EQUALS EXPRESION SEMICOLON','ASIGNACION',4,'p_ASIGNACION','camellie.py',139),
  ('ESCRITURA -> PRINT LEFT_PARENTHESIS EXPRESION ESCRITURA_P','ESCRITURA',4,'p_ESCRITURA','camellie.py',144),
  ('ESCRITURA -> PRINT LEFT_PARENTHESIS STRING ESCRITURA_P','ESCRITURA',4,'p_ESCRITURA','camellie.py',145),
  ('ESCRITURA_P -> COMMA EXPRESION ESCRITURA_P','ESCRITURA_P',3,'p_ESCRITURA_P','camellie.py',149),
  ('ESCRITURA_P -> COMMA STRING ESCRITURA_P','ESCRITURA_P',3,'p_ESCRITURA_P','camellie.py',150),
  ('ESCRITURA_P -> RIGHT_PARENTHESIS SEMICOLON','ESCRITURA_P',2,'p_ESCRITURA_P','camellie.py',151),
  ('EXPRESION -> EXP EXPRESION_P','EXPRESION',2,'p_EXPRESION','camellie.py',156),
  ('EXPRESION_P -> GREATER_THAN EXP','EXPRESION_P',2,'p_EXPRESION_P','camellie.py',160),
  ('EXPRESION_P -> LESS_THAN EXP','EXPRESION_P',2,'p_EXPRESION_P','camellie.py',161),
  ('EXPRESION_P -> NOT_EQUAL EXP','EXPRESION_P',2,'p_EXPRESION_P','camellie.py',162),
  ('EXPRESION_P -> EMPTY','EXPRESION_P',1,'p_EXPRESION_P','camellie.py',163),
  ('CONDICION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BLOQUE CONDICION_P','CONDICION',6,'p_CONDICION','camellie.py',168),
  ('CONDICION_P -> ELSE BLOQUE SEMICOLON','CONDICION_P',3,'p_CONDICION_P','camellie.py',172),
  ('CONDICION_P -> SEMICOLON','CONDICION_P',1,'p_CONDICION_P','camellie.py',173),
  ('EXP -> TERMINO EXP_P','EXP',2,'p_EXP','camellie.py',178),
  ('EXP_P -> PLUS TERMINO EXP_P','EXP_P',3,'p_EXP_P','camellie.py',182),
  ('EXP_P -> MINUS TERMINO EXP_P','EXP_P',3,'p_EXP_P','camellie.py',183),
  ('EXP_P -> EMPTY','EXP_P',1,'p_EXP_P','camellie.py',184),
  ('TERMINO -> FACTOR TERMINO_P','TERMINO',2,'p_TERMINO','camellie.py',189),
  ('TERMINO_P -> MULTIPLY FACTOR TERMINO_P','TERMINO_P',3,'p_TERMINO_P','camellie.py',193),
  ('TERMINO_P -> DIVIDE FACTOR TERMINO_P','TERMINO_P',3,'p_TERMINO_P','camellie.py',194),
  ('TERMINO_P -> EMPTY','TERMINO_P',1,'p_TERMINO_P','camellie.py',195),
  ('FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS','FACTOR',3,'p_FACTOR','camellie.py',200),
  ('FACTOR -> VARCTE','FACTOR',1,'p_FACTOR','camellie.py',201),
  ('FACTOR -> MINUS VARCTE','FACTOR',2,'p_FACTOR','camellie.py',202),
  ('FACTOR -> PLUS VARCTE','FACTOR',2,'p_FACTOR','camellie.py',203),
  ('VARCTE -> ID','VARCTE',1,'p_VARCTE','camellie.py',208),
  ('VARCTE -> INT','VARCTE',1,'p_VARCTE','camellie.py',209),
  ('VARCTE -> FLOAT','VARCTE',1,'p_VARCTE','camellie.py',210),
  ('EMPTY -> <empty>','EMPTY',0,'p_EMPTY','camellie.py',214),
]
